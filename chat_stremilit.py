import os
import streamlit as st
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.schema import HumanMessage
from langchain.prompts import PromptTemplate

# Load environment variables
load_dotenv()

# Configure the Gemini API key from environment variables
api_key = os.getenv("GEMINI_API_KEY")

# Initialize the language model
llm_gemini = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    api_key=api_key,
    temperature=1,
)

# Define the prompt template for sentiment analysis
template = """
Voc√™ √© um agente de intelig√™ncia artificial especializado em an√°lise de sentimentos de clientes. Sua tarefa √© analisar a avalia√ß√£o abaixo e gerar tr√™s elementos:

1. Sentimento: positivo, neutro ou negativo.
2. Satisfa√ß√£o: percentual entre 0% e 100%, baseado no tom e nas palavras utilizadas pelo cliente.
3. Coment√°rio da IA: uma breve an√°lise em linguagem natural (de 2 a 3 frases), explicando a raz√£o do sentimento identificado.

Regras:
- Sentimentos positivos: satisfa√ß√£o entre 70% e 100%.
- Sentimentos neutros: satisfa√ß√£o entre 40% e 69%.
- Sentimentos negativos: satisfa√ß√£o entre 0% e 39%.
- Seja direto, sem copiar o texto do cliente literalmente.
- N√£o invente informa√ß√µes.
- Sempre responda no formato:

Sentimento: <classifica√ß√£o>  
Satisfa√ß√£o: <percentual>%  
Coment√°rio da IA: <texto da an√°lise>

üß™ Exemplo:

Avalia√ß√£o: "Achei o produto bom, chegou antes do prazo e o atendimento foi √≥timo. S√≥ achei o pre√ßo um pouco salgado."

Sa√≠da esperada:
Sentimento: Positivo  
Satisfa√ß√£o: 85%  
Coment√°rio da IA: O cliente demonstrou satisfa√ß√£o com a entrega e o atendimento, o que s√£o pontos fortes da experi√™ncia. Apesar de mencionar o pre√ßo elevado, o tom geral da avalia√ß√£o √© positivo e indica uma boa aceita√ß√£o do produto.

üîç Agora, avalie a seguinte avalia√ß√£o:

Avalia√ß√£o: {user_input}"
"""

prompt_template = PromptTemplate(
    template=template,
    input_variables=["user_input"]
)

# --- Streamlit App Layout ---

st.set_page_config(page_title="An√°lise de Sentimentos com IA", page_icon="ü§ñ")

st.title("ü§ñ An√°lise de Sentimentos de Avalia√ß√µes")
st.markdown("---")

st.markdown("""
Esta aplica√ß√£o utiliza Intelig√™ncia Artificial para classificar o sentimento em avalia√ß√µes de clientes.
Basta inserir o texto no campo abaixo e clicar em **Analisar**.
""")

# User input text area
user_review = st.text_area(
    "Insira a avalia√ß√£o do cliente aqui:",
    height=150,
    placeholder="Ex: 'Adorei o produto, mas a entrega demorou um pouco.'"
)

# Analysis button
if st.button("Analisar"):
    if user_review and api_key:
        # Format the prompt with user input
        prompt = prompt_template.format(user_input=user_review)

            # Invoke the language model
        response = llm_gemini.invoke([HumanMessage(content=prompt)])

            # Display the result
        st.markdown("---")
        st.subheader("Resultado da An√°lise:")
        st.markdown(response.content)
    elif not api_key:
        st.error("A chave da API do Gemini n√£o foi encontrada. Por favor, configure-a no arquivo .env.")
    else:
        st.warning("Por favor, insira uma avalia√ß√£o para analisar.")

st.markdown("---")
st.markdown("Desenvolvido com [Streamlit](https.streamlit.io/) e [Google Gemini](https://ai.google/discover/gemini/).")
